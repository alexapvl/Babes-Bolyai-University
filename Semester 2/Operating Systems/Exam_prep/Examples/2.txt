1. RO: Daţi o expresie regulară care acceptă orice număr impar de cuvinte separate prin spaţii, fiecare cuvânt având număr impar de litere.
EN: Give a regular expression that matches any odd number of words, each word having an odd number of letters.
\<(..)*.\> (\<(..)*.\> \<(..)*.\>)*

2. RO: Daţi patru comenzi care afişează numărul de linii goale dintr-un fişier.
EN: Give four commands that display the number of empty lines in a file.
grep -Ec "^$" a.txt
grep -Evc ".{1,}" a.txt
grep -Evc "..*" a.txt
grep -Evc ".+" a.txt

3. RO: Scrieţi o comandă SED care afişează liniile dintr-un fişier ştergând din ele primul, al treilea, al cincilea, al şaptelea, etc spaţii.
EN: Write a SED command that displays a file's lines deleting the first, the third, the fifth, the seventh, etc space on those lines
sed -E 's/( )([^ ]+)( )?/\2\3/gi' a.txt

4. RO: Scrieţi o comandă AWK care afişează produsul ultimului câmp al liniilor de pe poziţii impare care au număr impar de câmpuri.
EN: Write an AWK command that displays the product of the last field of lines on odd positions having an odd number of fields.
awk 'BEGIN{ product=1 } NR%2==1 NF%2==1{ product*=$NF} END{ print product }'

5. RO: Daţi patru moduri prin care ieşirea standard a unui proces poate fi redirectată.
EN: Give four ways of redirecting the standard output of a process.
Redirecd it via > : command > a.txt
Redirecd it via >> : command >> a.txt
Redirecd it via pipe : command | echo > a.txt
Redirecd it via tee : echo "Hello" | tee a.txt

6. RO: Scrieţi trei condiţii Shell UNIX care verifică existenţa unui fişier.
EN: Write three UNIX Shell conditions that check the existence of a file.
if [ -e $file ]
if [ $(ls $file 2>&1 | grep -Ec "No such file") -eq 0 ]
if [ $(ls $file || echo "No such file" ]

7. RO: Desenati ierarhia proceselor create de coduld e mai jos, incluzand procesul parinte.
EN: Draw the hierarchy of processes created by the code below, including the parent process.

    for(i=0; i<3; i++) {
        if(execlp("ls", "ls", "/", NULL) != -1) {
            fork();
        }
    }
P

8. RO: Adăugaţi codul C necesar pentru ca instrucţiunea de mai jos să nu se blocheze aşteptând la intrarea standard.
EN: Add the necessary code so that the instruction below does not get stuck waiting for standard input.

    execlp("cat", "cat", "a.txt" NULL);

9. RO: Schiţaţi o implementare a funcţiilor popen şi pclose, doar pentru cazul în care outputul comenzii e citit în codul C.
EN: Sketch an implementation of the popen and pclose functions, only for the case when the command output should be read in the C code.
popen should have a caller id and child id and determine the type of the two(given as parameter)
one should be writer and the other reader
in pclose we should call the fclose function on a FILE*

10. RO: Câte FIFO-uri poate deschide pentru citire un process, dacă FIFO-urile sunt şi vor fi întotdeauna folosite de alte procese doar pentru citire?
EN: How many FIFOs can a process open for reading if the FIFOs are and will ever be used by other processes only for reading?
Only one since when opening it it will wait until another process opens it in writing mode.

11. RO: Când aţi folosi un FIFO în locul unui pipe?
EN: When would you prefer using a FIFO instead of a pipe?
When we do not have parent-child generated processes, because a pipe is not a file on the disk and cannot be shared between two processes in separate files,
while a FIFO is a file on disk and can be used by processes which are not related to one another in any way.

12. RO: Ce este o "secţiune critică"?
EN: What is a "critical section"?
A crititical section is a part of the program there the shared resource needs to be protected that we avoid concurrent access.
This protected section cannot be entered by more than one process/thread at a time.

13. RO: Când aţi folosi un mutex în locul unui rwlock?
EN: When would you prefer using a mutex instead of a rwlock?
A mutex should be used when the thread function has only a section where the critical resource is ALWAYS changed in order to not let more
than one thread access the resource at a given time.

14. RO: Care va fi efectul înlocuirii apelurilor la pthread_mutex_lock cu apeluri la sem_wait?
EN: What will be the effect of replacing calls to pthread_mutex_lock with calls to sem_wait?
If the semaphore has a size of 1, the effect is the same as when using a mutex, as where if we have a semaphore with size more than 1, 
threads will pass one by one through the semaphore and when the maximum limit is reached, the rest of the threads will wait until 
the threads "inside" the semaphore will exit(sem_post) and make space for one more.

15. RO: Ce face pthread_cond_wait cu mutex-ul primit ca argument?
EN: What does pthread_cond_wait do with the mutex it gets as argument?
First, it unlocks the mutex in order to be locked by a thread which will or will not issue a signal or broadcast.
Also the pthread_cond_wait function should be in a conditioned while loop in order to ensure that the thread waiting for
the conditional variable does not wait after the signal has been sent, i.e. waiting idefinetly.

16. RO: Schiţaţi o soluţie pentru problema producător-consumator.
EN: Sketch a solution for the producer-consumer problem.
We will use read-write locks to ensure a correct solution.
There are two cases:
1) The product is only viewed by the consumer, i.e. only read lock which prevents any write locks
2) The product is consumed by the consumer, i.e. will use a write lock which prevents any read locks

17. RO: Ce puteţi face ca programator pentru a preveni deadlock-urile?
EN: What can you do as a software developer to prevent deadlocks?
Deadlocks can be prevented by a software developer by choosing an order of locking and always sticking to it in order to avoid cycles

18. RO: Prin ce tranziţie de stare va trece un process când apelează pthread_cond_wait? Justificaţi răspunsul.
EN: What state transition will a process undergo when it calls pthread_cond_wait? Justify your answer.
When a process calls pthread_cond_wait, it will go from RUN to WAIT. This behaviour is caused by the fact that, since the thread will
wait for a signal from another thread, the processor would be occupied without a reason, so it will release the core for another process to complete it's tasks.

19. RO: Ce conţinue un fişier de tip director în sistemul de fişiere Linux?
EN: What is the content of file of type directory in the Linux file system?
A directory type file contains a list with the names and addresses for every file/directory in its hierarchy.

20. RO: Explicaţi diferenţa dintre un link simbolic şi un link hard.
EN: Explain the difference between a symbolic link and a hard link.
Hard links directly reference a file's inode and must be on the same filesystem, while symlinks contain a path and can span filesystems. 
Deleting a file with hard links removes it only when the last link is deleted; deleting a symlinked file leaves a dangling symlink. 
Hard links are useful for data redundancy, while symlinks are ideal for shortcuts.
