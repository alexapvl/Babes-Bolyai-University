from tkinter import Tk, Frame, Toplevel, StringVar, IntVar, OptionMenu, messagebox, Menu, N, S, E, W, FLAT, Checkbutton, Label, CENTER, DISABLEDfrom tkmacosx import Buttonfrom PIL import ImageTk, Imagefrom src.service.service import GameServiceclass GameOver(Exception):    passclass GameGUI:    def __init__(self, game_service: GameService):        self.game_service = game_service        self.root = Tk()  # create a Tk root window        self.root.title("Obstruction")  # set the title of the window        self.in_game_window = None        self.start_with_ai = False        self.buttons = []        self.added_in_game_menu = False        self.menubar = Menu(self.root)        self.game_menu = Menu(self.menubar, tearoff=0)        self.game_menu.add_command(label="Start Game", command=self.start_game)        self.game_menu.add_separator()        self.game_menu.add_command(label="Author", command=self.show_author)        self.game_menu.add_command(label="Description", command=self.game_description)        self.game_menu.add_separator()        self.game_menu.add_command(label="Close", command=exit)        self.menubar.add_cascade(menu=self.game_menu, label="Game")        self.root.config(menu=self.menubar)        # setting tkinter window size        self.root.geometry("%dx%d+%d+%d" % (self.root.winfo_screenwidth() // 1.5, self.root.winfo_screenheight() // 1.5, self.root.winfo_screenwidth() // 6, self.root.winfo_screenheight() // 7))        img_main = ImageTk.PhotoImage(Image.open("../gui/obstruction.jpg"))        label = Label(self.root, image=img_main)        label.place(relx=0.5, rely=0.5, anchor=CENTER)        self.main_frame = Frame(self.root)        self.main_frame.columnconfigure(0, weight=1)        self.main_frame.columnconfigure(1, weight=1)        self.main_frame.columnconfigure(2, weight=1)        self.rows = StringVar()        options_x = [str(i) for i in range(1, 7)]        self.rows.set("Rows")        self.option_menu_x = OptionMenu(self.main_frame, self.rows, *options_x)        self.option_menu_x.grid(row=0, column=0, padx=5, pady=5)  # Adjust padx and pady as needed        self.option_menu_x.config(width=10, bd=0)        self.columns = StringVar()        options_y = [str(i) for i in range(1, 7)]        self.columns.set("Columns")        self.option_menu_y = OptionMenu(self.main_frame, self.columns, *options_y)        self.option_menu_y.grid(row=0, column=1, padx=5, pady=5)  # Adjust padx and pady as needed        self.option_menu_y.config(width=10, bd=0)        self.difficulty = StringVar()        options_difficulty = ["Easy", "Hard"]        self.difficulty.set("Difficulty")        self.option_menu_difficulty = OptionMenu(self.main_frame, self.difficulty, *options_difficulty)        self.option_menu_difficulty.grid(row=0, column=2, padx=5, pady=5)  # Adjust padx and pady as needed        self.option_menu_difficulty.config(width=10, bd=0)        self.check_start_first = IntVar()        check_start_first = Checkbutton(self.root, text="Start first", font=("Arial", 16), variable=self.check_start_first)        check_start_first.place(relx=0.5, rely=0.55, anchor="center")        start_button = Button(self.root, text="Start Game", font=("Arial", 16), command=self.start_game)        start_button.place(relx=0.5, rely=0.6, anchor="center")        self.main_frame.place(relx=0.5, rely=0.5, anchor="center")        self.description = "The game is played on a rectangular board divided into squares.\nThe player plays with 'O' and the computer with 'X' After each move on the board the neighbouring squares of the piece placed by the player are blocked.\nThe player who cannot place a piece on the board loses the game."        self.author = "This game was created by Apăvăloaiei Alexandru, student at the Faculty of Mathematics and Computer Science at Babes Bolyai University in Cluj-Napoca, Romania"        self.root.protocol("WM_DELETE_WINDOW", self.on_closing_root)        self.root.mainloop()    def start_game(self):        try:            self.game_service.difficulty = self.difficulty.get().lower()            self.game_service.board.row = int(self.rows.get())            self.game_service.board.column = int(self.columns.get())            self.game_service.create_board()            self.buttons = [[Button() for _ in range(self.game_service.board.column)] for _ in range(self.game_service.board.row)]            self.main_frame.grid_forget()            # create frame with the board            self.in_game_window = Toplevel(self.root)            self.in_game_window.title("In-Game")            self.in_game_window.geometry("%dx%d+%d+%d" % (self.root.winfo_screenwidth() // 1.5, self.root.winfo_screenheight() // 1.5, self.root.winfo_screenwidth() // 6, self.root.winfo_screenheight() // 7))            self.in_game_window.grab_set()  # prevents interaction with the main window while the board window is open            img_in_game = ImageTk.PhotoImage(Image.open("../gui/obstruction-background-only.jpg"))            label = Label(self.in_game_window, image=img_in_game)            label.place(relx=0.5, rely=0.5, anchor=CENTER)            # restart game button            restart_button = Button(self.in_game_window, text="Restart Game", font=("Arial", 16), command=self.restart_game)            restart_button.place(relx=0.5, rely=0.1, anchor="center")            # create menubar            in_game_menubar = Menu(self.menubar, tearoff=0)            # this will restart the current game            in_game_menubar.add_command(label="Restart Game", command=self.restart_game)            in_game_menubar.add_separator()            in_game_menubar.add_command(label="Close", command=self.in_game_window_destroy)            # add the in-game menubar to the main menubar            self.menubar.add_cascade(menu=in_game_menubar, label="In-Game")            # disable the start game button from the main menubar            self.game_menu.entryconfig("Start Game", state=DISABLED)            buttons_frame = Frame(self.in_game_window)            buttons_frame.place(relx=0.5, rely=0.5, anchor="center")            self.create_buttons(buttons_frame)            self.check_if_ai_starts()            self.in_game_window.protocol("WM_DELETE_WINDOW", self.on_closing_in_game_window)            self.in_game_window.mainloop()        except ValueError:            messagebox.showerror(title="Error", message="Invalid input")    def restart_game(self):        self.game_service.board.clear_board()        self.check_if_ai_starts()        self.update_board()    def button_press(self, x: int, y: int):        try:            self.game_service.make_move_player(x, y)            self.update_board()            if self.game_service.game_over() is False:                raise GameOver("Game over. Player won")            self.game_service.make_move_ai(self.start_with_ai, x, y)            self.update_board()            if self.game_service.game_over() is False:                raise GameOver("Game over. Computer won")        except GameOver as info:            self.update_board()            messagebox.showinfo("Game Over", f"{info}")        except Exception as error:            messagebox.showerror(title="Error", message=str(error))    def update_board(self):        for i in range(self.game_service.board.row):            for j in range(self.game_service.board.column):                if self.game_service.board.board[i][j] == " - ":                    self.buttons[i][j].config(text="", bg="Red")                elif self.game_service.board.board[i][j] == "X":                    self.buttons[i][j].config(text="X", background='White')                elif self.game_service.board.board[i][j] == "O":                    self.buttons[i][j].config(text="O", background='White')                else:                    self.buttons[i][j].config(text="", background='White')    def create_buttons(self, frame: Frame):        for i in range(self.game_service.board.row):            frame.grid_rowconfigure(i, weight=1)            for j in range(self.game_service.board.column):                frame.grid_columnconfigure(j, weight=1)                self.game_service.board.board[i][j] = 0                self.buttons[i][j] = Button(frame, text="", font=("Arial", 26), relief=FLAT, background='White', command=lambda x=i, y=j: self.button_press(x, y), width=50, height=50)                self.buttons[i][j].grid(row=i, column=j, sticky=W + E + N + S)    def check_if_ai_starts(self):        if self.check_start_first.get() == 0:            self.start_with_ai = True            self.game_service.make_move_ai(self.start_with_ai, 0, 0)            self.update_board()    def game_description(self):        messagebox.showinfo(title="Game Description", message=self.description)    def show_author(self):        messagebox.showinfo(title="Author", message=self.author)    def on_closing_root(self):        if messagebox.askokcancel("Quit", "Do you want to quit the game?"):            self.root.destroy()    def on_closing_in_game_window(self):        if messagebox.askyesno("Quit", "Do you want to quit the current game?"):            self.in_game_window.destroy()            self.menubar.delete("In-Game")            self.game_menu.entryconfig("Start Game", state="normal")    def in_game_window_destroy(self):        # created because the "self.in_game_window.destroy" didn't work when called the in_game menubar        self.in_game_window.destroy()        self.menubar.delete("In-Game")        self.game_menu.entryconfig("Start Game", state="normal")